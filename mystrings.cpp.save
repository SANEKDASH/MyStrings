#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "debug.h"
#include "mystrings.h"

int myPuts(const char *str)
{
    CHECK(str);

    int i = 0;

    for (; *(str + i) != '\0'; ++i)
    {
        putchar(*(str + i));
    }
    putchar('\n');

    return i;
}

char *myStrchr(char *str, int ch)
{
    CHECK(str);

    int i = 0;

    for (; *(str + i) != '\0'; ++i)
    {
        if (*(str + i) == ch)
        {
            return str + i;
        }
    }

    return nullptr;
}

size_t myStrlen(const char *str)
{
    CHECK(str);

    size_t i = 0;
    for (; *(str + i) != '\0'; ++i)
    {
        /* Do nothing */
    }

    return i;
}

char *myStrcpy(char *dest, const char *src )
{
    CHECK(dest);
    CHECK(src);

    int i = 0;

    for (; *(src + i) != '\0'; ++i)
    {
        CHECK(i < strlen());
        //*(dest + i) = *(src + i);
        dest[i] = src[i];
    }

    *(dest + i) = '\0';

    return dest;
}

char *myStrncpy(char *dest, const char *src, size_t count)
{
    CHECK(dest);
    CHECK(src);

    size_t i = 0;

    for (; *(src + i) != '\0' && i < count; ++i)
    {
        *(dest + i) = *(src + i);
    }

    for (; i < count; ++i)
    {
        *(dest + i) = '\0';
    }

    return dest;
}

char *myStrcat(char *dest, const char *src)
{
    CHECK(dest);
    CHECK(src);

    int i = myStrlen(dest);

    for (int j = 0; *(src + j) != '\0'; ++i, ++j)
    {
        *(dest + i) = *(src + j);
    }

    *(dest + i) = '\0';

    return dest;
}

char *myStrncat(char *dest, const char *src, size_t count)
{
    CHECK(dest);
    CHECK(src);

    size_t i = myStrlen(dest);

    for (size_t j = 0; *(src + j) != '\0' && j < count; ++i, ++j)
    {
        *(dest + i) = *(src + j);
    }

    *(dest + i) = '\0';

    return dest;
}

char *myFgets(char *str, size_t count, FILE *stream)
{
    CHECK(!ferror(stream));
    CHECK(stream);
    CHECK(str);

    size_t i = 0;

    int c = 0;

    for (; i < count - 1 && (c = getc(stream)) != '\n'; i++)
    {
        *(str + i) = (char) c;
    }

    *(str + i) = '\0';

    return str;
}

char *myStrdup(const char *str)
{
    CHECK(str);

    char *str_copy = (char*) calloc(myStrlen(str) + 1, sizeof(char));

    if (str_copy == nullptr)
    {
        return nullptr;
    }

    myStrcpy(str_copy, str);

    return str_copy;
}

ssize_t myGetline(char **ptr_line, size_t *n, FILE *stream)
{
    if (ferror(stream) && ptr_line == nullptr && n == nullptr)
    {
        return -1;
    }

    if (*ptr_line == nullptr)
    {
        *ptr_line = (char *) calloc(*n, sizeof(char));  // !!!!???? realloc(nullptr)
    }

    size_t i = 0;

    int c = 0;

    while ((c = fgetc(stream)) != '\n' && c != EOF  && ptr_line != nullptr)
    {
        if (i < *n - 1)
        {
            *(*ptr_line + i) = (char) c;

            ++i;
        }
        else
        {
            realloc(*ptr_line, ++*n);

            *(*ptr_line + i) = (char) c;

            ++i;
        }
    }

    if (c == EOF && **ptr_line == '\0')
    {
        return -1;
    }

    *(*ptr_line + i) = '\0';

    return i;
}

static void HashFunc(const char *str, int *val, int n);

char *myStrStr(const char *str, const char *pattern)
{
    CHECK(str);
    CHECK(substr);

    int pattern_len = myStrlen(pattern);

    int str_hash = 0;
    int pattern_hash = 0;

    HashFunc(pattern, &pattern_hash, pattern_len);

    HashFunc(str, &str_hash, pattern_len - 1);

    for (; *str != '\0'; ++str)
    {
        str_hash += str[pattern_len - 1];

        if (str_hash == pattern_hash)
        {
            int j = 0;

            for (; j < pattern_len && str[j] != '\0' && str[j] == pattern[j]; ++j)
            {
                // do nothing
            }

            if (pattern[j] == '\0')
            {
                return (char *) str;
            }
        }

        str_hash -= str[0];
    }

    return nullptr;
}

static void HashFunc(const char *str, int *val, int n)
{
    *val = 0;

    for (int i = 0; i < n && str[i] != '\0'; ++i)
    {
        *val += str[i];
    }

    return;
}

